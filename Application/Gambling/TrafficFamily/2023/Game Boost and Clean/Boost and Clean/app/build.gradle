plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    namespace 'com.veldan.boost.and.clean.simpleapp'
    compileSdk 33

    defaultConfig {
        applicationId "com.veldan.boost.and.clean.simpleapp"
        minSdk 24
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            res.srcDirs = [
                    'src/main/res',
                    'src/main/res/launcher',
            ]
        }
    }
    viewBinding.enabled = true
}

configurations { natives }

dependencies {

    // Default
    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.appcompat:appcompat:1.6.0'
    implementation 'com.google.android.material:material:1.8.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    // LibGDX
    def gdx_version = '1.10.0'
    api "com.badlogicgames.gdx:gdx-backend-android:$gdx_version"
    natives "com.badlogicgames.gdx:gdx-platform:$gdx_version:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-platform:$gdx_version:natives-arm64-v8a"
    natives "com.badlogicgames.gdx:gdx-platform:$gdx_version:natives-x86"
    natives "com.badlogicgames.gdx:gdx-platform:$gdx_version:natives-x86_64"
    implementation "com.badlogicgames.gdx:gdx-freetype:$gdx_version"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdx_version:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdx_version:natives-arm64-v8a"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdx_version:natives-x86"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdx_version:natives-x86_64"
    // Library
    def navigation_version = '2.4.1'
    implementation "androidx.navigation:navigation-fragment-ktx:$navigation_version"
    def coroutines_version = '1.6.0'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    def dataStorePref_version = "1.0.0"
    implementation "androidx.datastore:datastore-preferences:$dataStorePref_version"
    def adMob_version = "21.5.0"
    implementation "com.google.android.gms:play-services-ads:$adMob_version"

}

task copyAndroidNatives {
    doFirst {
        file("libs/armeabi-v7a/").mkdirs()
        file("libs/arm64-v8a/").mkdirs()
        file("libs/x86_64/").mkdirs()
        file("libs/x86/").mkdirs()

        configurations.natives.copy().files.each { jar ->
            def outputDir = null
            if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
            if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
            if (jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
            if (jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
            if (outputDir != null) {
                copy {
                    from zipTree(jar)
                    into outputDir
                    include "*.so"
                }
            }
        }
    }
}

tasks.whenTaskAdded { packageTask ->
    if (packageTask.name.contains("package")) {
        packageTask.dependsOn 'copyAndroidNatives'
    }
}

task run(type: Exec) {
    def path
    def localProperties = project.file("../local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }

    def adb = path + "/platform-tools/adb"
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'com.veldan.boost.and.clean.simpleapp/com.veldan.boost.and.clean.simpleapp.MainActivity'
}