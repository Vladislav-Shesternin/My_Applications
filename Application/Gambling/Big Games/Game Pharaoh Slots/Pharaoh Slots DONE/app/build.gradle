plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'androidx.navigation.safeargs'
    id 'kotlin-parcelize'
    id 'com.google.gms.google-services'
}

android {
    compileSdk 31
    buildFeatures {
        viewBinding true
    }
    defaultConfig {
        applicationId "com.pharhaslo.slo7"
        minSdk 21
        targetSdk 31
        versionCode 10
        versionName "1.0"
        manifestPlaceholders = [
                onesignal_app_id: '5b5f285e-4a67-4141-9582-49bb0386f920', //PLEASE LEAVE EMPTY
                // Project number pulled from dashboard, local value is ignored.
                onesignal_google_project_number: 'REMOTE'
        ]
    }

    buildTypes {
        debug {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            assets.srcDirs 'src\\main\\assets'
        }
        main.res.srcDirs = [
                'src/main/res',

                'src/main/res/launcher',
                'src/main/res/launcher/drawables',
                'src/main/res/launcher/mipmaps',
        ]
    }
    viewBinding.enabled = true
}

configurations { natives }

dependencies {
    implementation 'androidx.datastore:datastore-core:1.0.0'
    def gdx_version = '1.10.0'
    api "com.badlogicgames.gdx:gdx-backend-android:$gdx_version"
    natives "com.badlogicgames.gdx:gdx-platform:$gdx_version:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-platform:$gdx_version:natives-arm64-v8a"
    natives "com.badlogicgames.gdx:gdx-platform:$gdx_version:natives-x86"
    natives "com.badlogicgames.gdx:gdx-platform:$gdx_version:natives-x86_64"
    implementation "com.badlogicgames.gdx:gdx-freetype:$gdx_version"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdx_version:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdx_version:natives-arm64-v8a"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdx_version:natives-x86"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdx_version:natives-x86_64"
    def dataStorePref_version = "1.0.0"
    implementation "androidx.datastore:datastore-preferences:$dataStorePref_version"


    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'




    // Navigation Architecture Component
    def nav_version = "2.4.1"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    implementation 'com.google.code.gson:gson:2.8.9'

    //OkhttpClient
    implementation(platform("com.squareup.okhttp3:okhttp-bom:4.9.0"))
    implementation("com.squareup.okhttp3:okhttp")
    implementation("com.squareup.okhttp3:logging-interceptor")

    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'

    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.0'
    implementation 'com.squareup.picasso:picasso:2.71828'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation platform('com.google.firebase:firebase-bom:29.1.0')
    implementation 'com.google.firebase:firebase-analytics'

    implementation 'com.onesignal:OneSignal:4.6.7'
    implementation 'com.appsflyer:af-android-sdk:6.5.2'

    implementation 'com.squareup.retrofit2:converter-scalars:2.9.0'
    implementation 'com.google.android.gms:play-services-ads-identifier:18.0.1'
    implementation 'com.fredporciuncula:phonemoji:1.2.0'
    implementation 'com.google.android.play:core:1.10.3'
    implementation 'com.raycoarana.codeinputview:codeinputview:2.1.1'
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'

    def lottie_version = "4.2.2"
    implementation "com.airbnb.android:lottie:$lottie_version"
}

task copyAndroidNatives {
    doFirst {
        file("libs/armeabi/").mkdirs()
        file("libs/armeabi-v7a/").mkdirs()
        file("libs/arm64-v8a/").mkdirs()
        file("libs/x86_64/").mkdirs()
        file("libs/x86/").mkdirs()

        configurations.natives.copy().files.each { jar ->
            def outputDir = null
            if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
            if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
            if (jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
            if (jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
            if (jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
            if (outputDir != null) {
                copy {
                    from zipTree(jar)
                    into outputDir
                    include "*.so"
                }
            }
        }
    }
}

tasks.whenTaskAdded { packageTask ->
    if (packageTask.name.contains("package")) {
        packageTask.dependsOn 'copyAndroidNatives'
    }
}

task run(type: Exec) {
    def path
    def localProperties = project.file("../local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }

    def adb = path + "/platform-tools/adb"
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'com.veldan.pharaohslots/com.veldan.pharaohslots.AndroidLauncher'
}